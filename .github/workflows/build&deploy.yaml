name: Build, Push and Deploy to K8S

on:
  push:
    branches: [ main ]

env:
  APP_NAME: nginx-test-app
  DOCKER_REPO: makaron7321/nginx-test-app
  NAMESPACE: monitoring
  CONTAINER_PORT: 80

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REPO }}
        tags: |
          type=sha,prefix=,suffix=-{{date 'YYYYMMDDHHmmss'}}
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Save image tag
      run: echo "IMAGE_TAG=${{ steps.meta.outputs.tags }}" >> $GITHUB_ENV

  deploy-to-k8s:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Kubernetes tools
      run: |
        sudo apt-get update
        sudo apt-get install -y apt-transport-https ca-certificates curl
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
        echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
        sudo apt-get update
        sudo apt-get install -y kubectl

    - name: Configure Kubernetes access
      run: |
        mkdir -p ~/.kube
        echo '${{ secrets.KUBECONFIG }}' > ~/.kube/config
        kubectl config set-cluster default --server=https://89.169.159.219:6443 --insecure-skip-tls-verify=true

    - name: Deploy to Kubernetes
      run: |
        # Create namespace if not exists
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
        
        # Create or update deployment
        cat <<EOF | kubectl apply -f -
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: ${{ env.APP_NAME }}
          namespace: ${{ env.NAMESPACE }}
          labels:
            app: ${{ env.APP_NAME }}
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: ${{ env.APP_NAME }}
          template:
            metadata:
              labels:
                app: ${{ env.APP_NAME }}
            spec:
              containers:
              - name: ${{ env.APP_NAME }}
                image: ${{ env.DOCKER_REPO }}:latest
                ports:
                - containerPort: ${{ env.CONTAINER_PORT }}
                imagePullPolicy: Always
        EOF

        # Create or update service
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: Service
        metadata:
          name: ${{ env.APP_NAME }}-service
          namespace: ${{ env.NAMESPACE }}
        spec:
          selector:
            app: ${{ env.APP_NAME }}
          ports:
          - protocol: TCP
            port: 80
            targetPort: ${{ env.CONTAINER_PORT }}
          type: ClusterIP
        EOF

    - name: Verify deployment
      run: |
        kubectl get deployments -n ${{ env.NAMESPACE }}
        kubectl get pods -n ${{ env.NAMESPACE }} -l app=${{ env.APP_NAME }}
        kubectl get services -n ${{ env.NAMESPACE }}
